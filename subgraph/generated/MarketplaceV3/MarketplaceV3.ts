// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }

  get prevURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get newURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class PlatformFeeInfoUpdated extends ethereum.Event {
  get params(): PlatformFeeInfoUpdated__Params {
    return new PlatformFeeInfoUpdated__Params(this);
  }
}

export class PlatformFeeInfoUpdated__Params {
  _event: PlatformFeeInfoUpdated;

  constructor(event: PlatformFeeInfoUpdated) {
    this._event = event;
  }

  get platformFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get platformFeeBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PluginAdded extends ethereum.Event {
  get params(): PluginAdded__Params {
    return new PluginAdded__Params(this);
  }
}

export class PluginAdded__Params {
  _event: PluginAdded;

  constructor(event: PluginAdded) {
    this._event = event;
  }

  get functionSelector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pluginAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PluginRemoved extends ethereum.Event {
  get params(): PluginRemoved__Params {
    return new PluginRemoved__Params(this);
  }
}

export class PluginRemoved__Params {
  _event: PluginRemoved;

  constructor(event: PluginRemoved) {
    this._event = event;
  }

  get functionSelector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pluginAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PluginSet extends ethereum.Event {
  get params(): PluginSet__Params {
    return new PluginSet__Params(this);
  }
}

export class PluginSet__Params {
  _event: PluginSet;

  constructor(event: PluginSet) {
    this._event = event;
  }

  get functionSelector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get pluginAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PluginUpdated extends ethereum.Event {
  get params(): PluginUpdated__Params {
    return new PluginUpdated__Params(this);
  }
}

export class PluginUpdated__Params {
  _event: PluginUpdated;

  constructor(event: PluginUpdated) {
    this._event = event;
  }

  get functionSelector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldPluginAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newPluginAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class BuyerApprovedForListing extends ethereum.Event {
  get params(): BuyerApprovedForListing__Params {
    return new BuyerApprovedForListing__Params(this);
  }
}

export class BuyerApprovedForListing__Params {
  _event: BuyerApprovedForListing;

  constructor(event: BuyerApprovedForListing) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CancelledListing extends ethereum.Event {
  get params(): CancelledListing__Params {
    return new CancelledListing__Params(this);
  }
}

export class CancelledListing__Params {
  _event: CancelledListing;

  constructor(event: CancelledListing) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CurrencyApprovedForListing extends ethereum.Event {
  get params(): CurrencyApprovedForListing__Params {
    return new CurrencyApprovedForListing__Params(this);
  }
}

export class CurrencyApprovedForListing__Params {
  _event: CurrencyApprovedForListing;

  constructor(event: CurrencyApprovedForListing) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pricePerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewListing extends ethereum.Event {
  get params(): NewListing__Params {
    return new NewListing__Params(this);
  }
}

export class NewListing__Params {
  _event: NewListing;

  constructor(event: NewListing) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get listing(): NewListingListingStruct {
    return changetype<NewListingListingStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class NewListingListingStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get listingCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }

  get tokenType(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class NewSale extends ethereum.Event {
  get params(): NewSale__Params {
    return new NewSale__Params(this);
  }
}

export class NewSale__Params {
  _event: NewSale;

  constructor(event: NewSale) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get quantityBought(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalPricePaid(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class UpdatedListing extends ethereum.Event {
  get params(): UpdatedListing__Params {
    return new UpdatedListing__Params(this);
  }
}

export class UpdatedListing__Params {
  _event: UpdatedListing;

  constructor(event: UpdatedListing) {
    this._event = event;
  }

  get listingCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get listing(): UpdatedListingListingStruct {
    return changetype<UpdatedListingListingStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class UpdatedListingListingStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get listingCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }

  get tokenType(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class AuctionClosed extends ethereum.Event {
  get params(): AuctionClosed__Params {
    return new AuctionClosed__Params(this);
  }
}

export class AuctionClosed__Params {
  _event: AuctionClosed;

  constructor(event: AuctionClosed) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get closer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get auctionCreator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get winningBidder(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class CancelledAuction extends ethereum.Event {
  get params(): CancelledAuction__Params {
    return new CancelledAuction__Params(this);
  }
}

export class CancelledAuction__Params {
  _event: CancelledAuction;

  constructor(event: CancelledAuction) {
    this._event = event;
  }

  get auctionCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewAuction extends ethereum.Event {
  get params(): NewAuction__Params {
    return new NewAuction__Params(this);
  }
}

export class NewAuction__Params {
  _event: NewAuction;

  constructor(event: NewAuction) {
    this._event = event;
  }

  get auctionCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get auctionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get auction(): NewAuctionAuctionStruct {
    return changetype<NewAuctionAuctionStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class NewAuctionAuctionStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get auctionCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[6].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[7].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[9].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[11].toBigInt();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class NewBid extends ethereum.Event {
  get params(): NewBid__Params {
    return new NewBid__Params(this);
  }
}

export class NewBid__Params {
  _event: NewBid;

  constructor(event: NewBid) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get auction(): NewBidAuctionStruct {
    return changetype<NewBidAuctionStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class NewBidAuctionStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get auctionCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[6].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[7].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[9].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[11].toBigInt();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class AcceptedOffer extends ethereum.Event {
  get params(): AcceptedOffer__Params {
    return new AcceptedOffer__Params(this);
  }
}

export class AcceptedOffer__Params {
  _event: AcceptedOffer;

  constructor(event: AcceptedOffer) {
    this._event = event;
  }

  get offeror(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get quantityBought(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalPricePaid(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CancelledOffer extends ethereum.Event {
  get params(): CancelledOffer__Params {
    return new CancelledOffer__Params(this);
  }
}

export class CancelledOffer__Params {
  _event: CancelledOffer;

  constructor(event: CancelledOffer) {
    this._event = event;
  }

  get offeror(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewOffer extends ethereum.Event {
  get params(): NewOffer__Params {
    return new NewOffer__Params(this);
  }
}

export class NewOffer__Params {
  _event: NewOffer;

  constructor(event: NewOffer) {
    this._event = event;
  }

  get offeror(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offer(): NewOfferOfferStruct {
    return changetype<NewOfferOfferStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class NewOfferOfferStruct extends ethereum.Tuple {
  get offerId(): BigInt {
    return this[0].toBigInt();
  }

  get offeror(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get totalPrice(): BigInt {
    return this[6].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get tokenType(): i32 {
    return this[8].toI32();
  }

  get status(): i32 {
    return this[9].toI32();
  }
}

export class MarketplaceV3__getAllPluginsResultRegisteredStruct extends ethereum.Tuple {
  get functionSelector(): Bytes {
    return this[0].toBytes();
  }

  get functionSignature(): string {
    return this[1].toString();
  }

  get pluginAddress(): Address {
    return this[2].toAddress();
  }
}

export class MarketplaceV3__getPlatformFeeInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class MarketplaceV3__createListingInput_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[4].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get reserved(): boolean {
    return this[7].toBoolean();
  }
}

export class MarketplaceV3__getAllListingsResult_allListingsStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get listingCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }

  get tokenType(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class MarketplaceV3__getAllValidListingsResult_validListingsStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get listingCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }

  get tokenType(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class MarketplaceV3__getListingResultListingStruct extends ethereum.Tuple {
  get listingId(): BigInt {
    return this[0].toBigInt();
  }

  get listingCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[6].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get reserved(): boolean {
    return this[9].toBoolean();
  }

  get tokenType(): i32 {
    return this[10].toI32();
  }

  get status(): i32 {
    return this[11].toI32();
  }
}

export class MarketplaceV3__createAuctionInput_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[4].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[5].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[6].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[7].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[9].toBigInt();
  }
}

export class MarketplaceV3__getAllAuctionsResult_allAuctionsStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get auctionCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[6].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[7].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[9].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[11].toBigInt();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class MarketplaceV3__getAllValidAuctionsResult_validAuctionsStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get auctionCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[6].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[7].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[9].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[11].toBigInt();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class MarketplaceV3__getAuctionResult_auctionStruct extends ethereum.Tuple {
  get auctionId(): BigInt {
    return this[0].toBigInt();
  }

  get auctionCreator(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[6].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[7].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[8].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[9].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[11].toBigInt();
  }

  get tokenType(): i32 {
    return this[12].toI32();
  }

  get status(): i32 {
    return this[13].toI32();
  }
}

export class MarketplaceV3__getWinningBidResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_bidder(): Address {
    return this.value0;
  }

  get_currency(): Address {
    return this.value1;
  }

  get_bidAmount(): BigInt {
    return this.value2;
  }
}

export class MarketplaceV3__getAllOffersResult_allOffersStruct extends ethereum.Tuple {
  get offerId(): BigInt {
    return this[0].toBigInt();
  }

  get offeror(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get totalPrice(): BigInt {
    return this[6].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get tokenType(): i32 {
    return this[8].toI32();
  }

  get status(): i32 {
    return this[9].toI32();
  }
}

export class MarketplaceV3__getAllValidOffersResult_validOffersStruct extends ethereum.Tuple {
  get offerId(): BigInt {
    return this[0].toBigInt();
  }

  get offeror(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get totalPrice(): BigInt {
    return this[6].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get tokenType(): i32 {
    return this[8].toI32();
  }

  get status(): i32 {
    return this[9].toI32();
  }
}

export class MarketplaceV3__getOfferResult_offerStruct extends ethereum.Tuple {
  get offerId(): BigInt {
    return this[0].toBigInt();
  }

  get offeror(): Address {
    return this[1].toAddress();
  }

  get assetContract(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get quantity(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get totalPrice(): BigInt {
    return this[6].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get tokenType(): i32 {
    return this[8].toI32();
  }

  get status(): i32 {
    return this[9].toI32();
  }
}

export class MarketplaceV3__makeOfferInput_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get totalPrice(): BigInt {
    return this[4].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketplaceV3 extends ethereum.SmartContract {
  static bind(address: Address): MarketplaceV3 {
    return new MarketplaceV3("MarketplaceV3", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _getPluginForFunction(_selector: Bytes): Address {
    let result = super.call(
      "_getPluginForFunction",
      "_getPluginForFunction(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_selector)]
    );

    return result[0].toAddress();
  }

  try__getPluginForFunction(_selector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_getPluginForFunction",
      "_getPluginForFunction(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_selector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractType(): Bytes {
    let result = super.call("contractType", "contractType():(bytes32)", []);

    return result[0].toBytes();
  }

  try_contractType(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("contractType", "contractType():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): i32 {
    let result = super.call("contractVersion", "contractVersion():(uint8)", []);

    return result[0].toI32();
  }

  try_contractVersion(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAllFunctionsOfPlugin(_pluginAddress: Address): Array<Bytes> {
    let result = super.call(
      "getAllFunctionsOfPlugin",
      "getAllFunctionsOfPlugin(address):(bytes4[])",
      [ethereum.Value.fromAddress(_pluginAddress)]
    );

    return result[0].toBytesArray();
  }

  try_getAllFunctionsOfPlugin(
    _pluginAddress: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAllFunctionsOfPlugin",
      "getAllFunctionsOfPlugin(address):(bytes4[])",
      [ethereum.Value.fromAddress(_pluginAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAllPlugins(): Array<MarketplaceV3__getAllPluginsResultRegisteredStruct> {
    let result = super.call(
      "getAllPlugins",
      "getAllPlugins():((bytes4,string,address)[])",
      []
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllPluginsResultRegisteredStruct
    >();
  }

  try_getAllPlugins(): ethereum.CallResult<
    Array<MarketplaceV3__getAllPluginsResultRegisteredStruct>
  > {
    let result = super.tryCall(
      "getAllPlugins",
      "getAllPlugins():((bytes4,string,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketplaceV3__getAllPluginsResultRegisteredStruct
      >()
    );
  }

  getPlatformFeeInfo(): MarketplaceV3__getPlatformFeeInfoResult {
    let result = super.call(
      "getPlatformFeeInfo",
      "getPlatformFeeInfo():(address,uint16)",
      []
    );

    return new MarketplaceV3__getPlatformFeeInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getPlatformFeeInfo(): ethereum.CallResult<
    MarketplaceV3__getPlatformFeeInfoResult
  > {
    let result = super.tryCall(
      "getPlatformFeeInfo",
      "getPlatformFeeInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketplaceV3__getPlatformFeeInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getPluginForFunction(_selector: Bytes): Address {
    let result = super.call(
      "getPluginForFunction",
      "getPluginForFunction(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_selector)]
    );

    return result[0].toAddress();
  }

  try_getPluginForFunction(_selector: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPluginForFunction",
      "getPluginForFunction(bytes4):(address)",
      [ethereum.Value.fromFixedBytes(_selector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRoleWithSwitch(role: Bytes, account: Address): boolean {
    let result = super.call(
      "hasRoleWithSwitch",
      "hasRoleWithSwitch(bytes32,address):(bool)",
      [ethereum.Value.fromFixedBytes(role), ethereum.Value.fromAddress(account)]
    );

    return result[0].toBoolean();
  }

  try_hasRoleWithSwitch(
    role: Bytes,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasRoleWithSwitch",
      "hasRoleWithSwitch(bytes32,address):(bool)",
      [ethereum.Value.fromFixedBytes(role), ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pluginMap(): Address {
    let result = super.call("pluginMap", "pluginMap():(address)", []);

    return result[0].toAddress();
  }

  try_pluginMap(): ethereum.CallResult<Address> {
    let result = super.tryCall("pluginMap", "pluginMap():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MAX_BPS(): BigInt {
    let result = super.call("MAX_BPS", "MAX_BPS():(uint64)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_BPS", "MAX_BPS():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _msgData(): Bytes {
    let result = super.call("_msgData", "_msgData():(bytes)", []);

    return result[0].toBytes();
  }

  try__msgData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("_msgData", "_msgData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _msgSender(): Address {
    let result = super.call("_msgSender", "_msgSender():(address)", []);

    return result[0].toAddress();
  }

  try__msgSender(): ethereum.CallResult<Address> {
    let result = super.tryCall("_msgSender", "_msgSender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createListing(
    _params: MarketplaceV3__createListingInput_paramsStruct
  ): BigInt {
    let result = super.call(
      "createListing",
      "createListing((address,uint256,uint256,address,uint256,uint128,uint128,bool)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_createListing(
    _params: MarketplaceV3__createListingInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createListing",
      "createListing((address,uint256,uint256,address,uint256,uint128,uint128,bool)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyPriceForListing(_listingId: BigInt, _currency: Address): BigInt {
    let result = super.call(
      "currencyPriceForListing",
      "currencyPriceForListing(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency)
      ]
    );

    return result[0].toBigInt();
  }

  try_currencyPriceForListing(
    _listingId: BigInt,
    _currency: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyPriceForListing",
      "currencyPriceForListing(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllListings(
    _startId: BigInt,
    _endId: BigInt
  ): Array<MarketplaceV3__getAllListingsResult_allListingsStruct> {
    let result = super.call(
      "getAllListings",
      "getAllListings(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint128,uint128,bool,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllListingsResult_allListingsStruct
    >();
  }

  try_getAllListings(
    _startId: BigInt,
    _endId: BigInt
  ): ethereum.CallResult<
    Array<MarketplaceV3__getAllListingsResult_allListingsStruct>
  > {
    let result = super.tryCall(
      "getAllListings",
      "getAllListings(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint128,uint128,bool,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketplaceV3__getAllListingsResult_allListingsStruct
      >()
    );
  }

  getAllValidListings(
    _startId: BigInt,
    _endId: BigInt
  ): Array<MarketplaceV3__getAllValidListingsResult_validListingsStruct> {
    let result = super.call(
      "getAllValidListings",
      "getAllValidListings(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint128,uint128,bool,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllValidListingsResult_validListingsStruct
    >();
  }

  try_getAllValidListings(
    _startId: BigInt,
    _endId: BigInt
  ): ethereum.CallResult<
    Array<MarketplaceV3__getAllValidListingsResult_validListingsStruct>
  > {
    let result = super.tryCall(
      "getAllValidListings",
      "getAllValidListings(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint128,uint128,bool,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketplaceV3__getAllValidListingsResult_validListingsStruct
      >()
    );
  }

  getListing(_listingId: BigInt): MarketplaceV3__getListingResultListingStruct {
    let result = super.call(
      "getListing",
      "getListing(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint128,uint128,bool,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_listingId)]
    );

    return changetype<MarketplaceV3__getListingResultListingStruct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    _listingId: BigInt
  ): ethereum.CallResult<MarketplaceV3__getListingResultListingStruct> {
    let result = super.tryCall(
      "getListing",
      "getListing(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint128,uint128,bool,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_listingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketplaceV3__getListingResultListingStruct>(
        value[0].toTuple()
      )
    );
  }

  isBuyerApprovedForListing(_listingId: BigInt, _buyer: Address): boolean {
    let result = super.call(
      "isBuyerApprovedForListing",
      "isBuyerApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_buyer)
      ]
    );

    return result[0].toBoolean();
  }

  try_isBuyerApprovedForListing(
    _listingId: BigInt,
    _buyer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBuyerApprovedForListing",
      "isBuyerApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_buyer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCurrencyApprovedForListing(
    _listingId: BigInt,
    _currency: Address
  ): boolean {
    let result = super.call(
      "isCurrencyApprovedForListing",
      "isCurrencyApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency)
      ]
    );

    return result[0].toBoolean();
  }

  try_isCurrencyApprovedForListing(
    _listingId: BigInt,
    _currency: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCurrencyApprovedForListing",
      "isCurrencyApprovedForListing(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_listingId),
        ethereum.Value.fromAddress(_currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalListings(): BigInt {
    let result = super.call("totalListings", "totalListings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalListings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalListings",
      "totalListings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createAuction(
    _params: MarketplaceV3__createAuctionInput_paramsStruct
  ): BigInt {
    let result = super.call(
      "createAuction",
      "createAuction((address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_createAuction(
    _params: MarketplaceV3__createAuctionInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuction",
      "createAuction((address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllAuctions(
    _startId: BigInt,
    _endId: BigInt
  ): Array<MarketplaceV3__getAllAuctionsResult_allAuctionsStruct> {
    let result = super.call(
      "getAllAuctions",
      "getAllAuctions(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllAuctionsResult_allAuctionsStruct
    >();
  }

  try_getAllAuctions(
    _startId: BigInt,
    _endId: BigInt
  ): ethereum.CallResult<
    Array<MarketplaceV3__getAllAuctionsResult_allAuctionsStruct>
  > {
    let result = super.tryCall(
      "getAllAuctions",
      "getAllAuctions(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketplaceV3__getAllAuctionsResult_allAuctionsStruct
      >()
    );
  }

  getAllValidAuctions(
    _startId: BigInt,
    _endId: BigInt
  ): Array<MarketplaceV3__getAllValidAuctionsResult_validAuctionsStruct> {
    let result = super.call(
      "getAllValidAuctions",
      "getAllValidAuctions(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllValidAuctionsResult_validAuctionsStruct
    >();
  }

  try_getAllValidAuctions(
    _startId: BigInt,
    _endId: BigInt
  ): ethereum.CallResult<
    Array<MarketplaceV3__getAllValidAuctionsResult_validAuctionsStruct>
  > {
    let result = super.tryCall(
      "getAllValidAuctions",
      "getAllValidAuctions(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketplaceV3__getAllValidAuctionsResult_validAuctionsStruct
      >()
    );
  }

  getAuction(
    _auctionId: BigInt
  ): MarketplaceV3__getAuctionResult_auctionStruct {
    let result = super.call(
      "getAuction",
      "getAuction(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return changetype<MarketplaceV3__getAuctionResult_auctionStruct>(
      result[0].toTuple()
    );
  }

  try_getAuction(
    _auctionId: BigInt
  ): ethereum.CallResult<MarketplaceV3__getAuctionResult_auctionStruct> {
    let result = super.tryCall(
      "getAuction",
      "getAuction(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint64,uint64,uint64,uint64,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketplaceV3__getAuctionResult_auctionStruct>(
        value[0].toTuple()
      )
    );
  }

  getWinningBid(_auctionId: BigInt): MarketplaceV3__getWinningBidResult {
    let result = super.call(
      "getWinningBid",
      "getWinningBid(uint256):(address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return new MarketplaceV3__getWinningBidResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_getWinningBid(
    _auctionId: BigInt
  ): ethereum.CallResult<MarketplaceV3__getWinningBidResult> {
    let result = super.tryCall(
      "getWinningBid",
      "getWinningBid(uint256):(address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketplaceV3__getWinningBidResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  isAuctionExpired(_auctionId: BigInt): boolean {
    let result = super.call(
      "isAuctionExpired",
      "isAuctionExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );

    return result[0].toBoolean();
  }

  try_isAuctionExpired(_auctionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuctionExpired",
      "isAuctionExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNewWinningBid(_auctionId: BigInt, _bidAmount: BigInt): boolean {
    let result = super.call(
      "isNewWinningBid",
      "isNewWinningBid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_bidAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_isNewWinningBid(
    _auctionId: BigInt,
    _bidAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNewWinningBid",
      "isNewWinningBid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_bidAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalAuctions(): BigInt {
    let result = super.call("totalAuctions", "totalAuctions():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAuctions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAuctions",
      "totalAuctions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllOffers(
    _startId: BigInt,
    _endId: BigInt
  ): Array<MarketplaceV3__getAllOffersResult_allOffersStruct> {
    let result = super.call(
      "getAllOffers",
      "getAllOffers(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllOffersResult_allOffersStruct
    >();
  }

  try_getAllOffers(
    _startId: BigInt,
    _endId: BigInt
  ): ethereum.CallResult<
    Array<MarketplaceV3__getAllOffersResult_allOffersStruct>
  > {
    let result = super.tryCall(
      "getAllOffers",
      "getAllOffers(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketplaceV3__getAllOffersResult_allOffersStruct>()
    );
  }

  getAllValidOffers(
    _startId: BigInt,
    _endId: BigInt
  ): Array<MarketplaceV3__getAllValidOffersResult_validOffersStruct> {
    let result = super.call(
      "getAllValidOffers",
      "getAllValidOffers(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );

    return result[0].toTupleArray<
      MarketplaceV3__getAllValidOffersResult_validOffersStruct
    >();
  }

  try_getAllValidOffers(
    _startId: BigInt,
    _endId: BigInt
  ): ethereum.CallResult<
    Array<MarketplaceV3__getAllValidOffersResult_validOffersStruct>
  > {
    let result = super.tryCall(
      "getAllValidOffers",
      "getAllValidOffers(uint256,uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint8,uint8)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_startId),
        ethereum.Value.fromUnsignedBigInt(_endId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketplaceV3__getAllValidOffersResult_validOffersStruct
      >()
    );
  }

  getOffer(_offerId: BigInt): MarketplaceV3__getOfferResult_offerStruct {
    let result = super.call(
      "getOffer",
      "getOffer(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_offerId)]
    );

    return changetype<MarketplaceV3__getOfferResult_offerStruct>(
      result[0].toTuple()
    );
  }

  try_getOffer(
    _offerId: BigInt
  ): ethereum.CallResult<MarketplaceV3__getOfferResult_offerStruct> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(uint256):((uint256,address,address,uint256,uint256,address,uint256,uint256,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_offerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketplaceV3__getOfferResult_offerStruct>(value[0].toTuple())
    );
  }

  makeOffer(_params: MarketplaceV3__makeOfferInput_paramsStruct): BigInt {
    let result = super.call(
      "makeOffer",
      "makeOffer((address,uint256,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_makeOffer(
    _params: MarketplaceV3__makeOfferInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "makeOffer",
      "makeOffer((address,uint256,uint256,address,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalOffers(): BigInt {
    let result = super.call("totalOffers", "totalOffers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalOffers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalOffers", "totalOffers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddPluginCall extends ethereum.Call {
  get inputs(): AddPluginCall__Inputs {
    return new AddPluginCall__Inputs(this);
  }

  get outputs(): AddPluginCall__Outputs {
    return new AddPluginCall__Outputs(this);
  }
}

export class AddPluginCall__Inputs {
  _call: AddPluginCall;

  constructor(call: AddPluginCall) {
    this._call = call;
  }

  get _plugin(): AddPluginCall_pluginStruct {
    return changetype<AddPluginCall_pluginStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddPluginCall__Outputs {
  _call: AddPluginCall;

  constructor(call: AddPluginCall) {
    this._call = call;
  }
}

export class AddPluginCall_pluginStruct extends ethereum.Tuple {
  get functionSelector(): Bytes {
    return this[0].toBytes();
  }

  get functionSignature(): string {
    return this[1].toString();
  }

  get pluginAddress(): Address {
    return this[2].toAddress();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _defaultAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _contractURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _trustedForwarders(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _platformFeeRecipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _platformFeeBps(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemovePluginCall extends ethereum.Call {
  get inputs(): RemovePluginCall__Inputs {
    return new RemovePluginCall__Inputs(this);
  }

  get outputs(): RemovePluginCall__Outputs {
    return new RemovePluginCall__Outputs(this);
  }
}

export class RemovePluginCall__Inputs {
  _call: RemovePluginCall;

  constructor(call: RemovePluginCall) {
    this._call = call;
  }

  get _selector(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemovePluginCall__Outputs {
  _call: RemovePluginCall;

  constructor(call: RemovePluginCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetPlatformFeeInfoCall extends ethereum.Call {
  get inputs(): SetPlatformFeeInfoCall__Inputs {
    return new SetPlatformFeeInfoCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeInfoCall__Outputs {
    return new SetPlatformFeeInfoCall__Outputs(this);
  }
}

export class SetPlatformFeeInfoCall__Inputs {
  _call: SetPlatformFeeInfoCall;

  constructor(call: SetPlatformFeeInfoCall) {
    this._call = call;
  }

  get _platformFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _platformFeeBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPlatformFeeInfoCall__Outputs {
  _call: SetPlatformFeeInfoCall;

  constructor(call: SetPlatformFeeInfoCall) {
    this._call = call;
  }
}

export class UpdatePluginCall extends ethereum.Call {
  get inputs(): UpdatePluginCall__Inputs {
    return new UpdatePluginCall__Inputs(this);
  }

  get outputs(): UpdatePluginCall__Outputs {
    return new UpdatePluginCall__Outputs(this);
  }
}

export class UpdatePluginCall__Inputs {
  _call: UpdatePluginCall;

  constructor(call: UpdatePluginCall) {
    this._call = call;
  }

  get _plugin(): UpdatePluginCall_pluginStruct {
    return changetype<UpdatePluginCall_pluginStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdatePluginCall__Outputs {
  _call: UpdatePluginCall;

  constructor(call: UpdatePluginCall) {
    this._call = call;
  }
}

export class UpdatePluginCall_pluginStruct extends ethereum.Tuple {
  get functionSelector(): Bytes {
    return this[0].toBytes();
  }

  get functionSignature(): string {
    return this[1].toString();
  }

  get pluginAddress(): Address {
    return this[2].toAddress();
  }
}

export class ApproveBuyerForListingCall extends ethereum.Call {
  get inputs(): ApproveBuyerForListingCall__Inputs {
    return new ApproveBuyerForListingCall__Inputs(this);
  }

  get outputs(): ApproveBuyerForListingCall__Outputs {
    return new ApproveBuyerForListingCall__Outputs(this);
  }
}

export class ApproveBuyerForListingCall__Inputs {
  _call: ApproveBuyerForListingCall;

  constructor(call: ApproveBuyerForListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _toApprove(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ApproveBuyerForListingCall__Outputs {
  _call: ApproveBuyerForListingCall;

  constructor(call: ApproveBuyerForListingCall) {
    this._call = call;
  }
}

export class ApproveCurrencyForListingCall extends ethereum.Call {
  get inputs(): ApproveCurrencyForListingCall__Inputs {
    return new ApproveCurrencyForListingCall__Inputs(this);
  }

  get outputs(): ApproveCurrencyForListingCall__Outputs {
    return new ApproveCurrencyForListingCall__Outputs(this);
  }
}

export class ApproveCurrencyForListingCall__Inputs {
  _call: ApproveCurrencyForListingCall;

  constructor(call: ApproveCurrencyForListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pricePerTokenInCurrency(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveCurrencyForListingCall__Outputs {
  _call: ApproveCurrencyForListingCall;

  constructor(call: ApproveCurrencyForListingCall) {
    this._call = call;
  }
}

export class BuyFromListingCall extends ethereum.Call {
  get inputs(): BuyFromListingCall__Inputs {
    return new BuyFromListingCall__Inputs(this);
  }

  get outputs(): BuyFromListingCall__Outputs {
    return new BuyFromListingCall__Outputs(this);
  }
}

export class BuyFromListingCall__Inputs {
  _call: BuyFromListingCall;

  constructor(call: BuyFromListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyFor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _expectedTotalPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BuyFromListingCall__Outputs {
  _call: BuyFromListingCall;

  constructor(call: BuyFromListingCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CreateListingCall extends ethereum.Call {
  get inputs(): CreateListingCall__Inputs {
    return new CreateListingCall__Inputs(this);
  }

  get outputs(): CreateListingCall__Outputs {
    return new CreateListingCall__Outputs(this);
  }
}

export class CreateListingCall__Inputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }

  get _params(): CreateListingCall_paramsStruct {
    return changetype<CreateListingCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateListingCall__Outputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateListingCall_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[4].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get reserved(): boolean {
    return this[7].toBoolean();
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _params(): UpdateListingCall_paramsStruct {
    return changetype<UpdateListingCall_paramsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class UpdateListingCall_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[4].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[6].toBigInt();
  }

  get reserved(): boolean {
    return this[7].toBoolean();
  }
}

export class BidInAuctionCall extends ethereum.Call {
  get inputs(): BidInAuctionCall__Inputs {
    return new BidInAuctionCall__Inputs(this);
  }

  get outputs(): BidInAuctionCall__Outputs {
    return new BidInAuctionCall__Outputs(this);
  }
}

export class BidInAuctionCall__Inputs {
  _call: BidInAuctionCall;

  constructor(call: BidInAuctionCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bidAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidInAuctionCall__Outputs {
  _call: BidInAuctionCall;

  constructor(call: BidInAuctionCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class CollectAuctionPayoutCall extends ethereum.Call {
  get inputs(): CollectAuctionPayoutCall__Inputs {
    return new CollectAuctionPayoutCall__Inputs(this);
  }

  get outputs(): CollectAuctionPayoutCall__Outputs {
    return new CollectAuctionPayoutCall__Outputs(this);
  }
}

export class CollectAuctionPayoutCall__Inputs {
  _call: CollectAuctionPayoutCall;

  constructor(call: CollectAuctionPayoutCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectAuctionPayoutCall__Outputs {
  _call: CollectAuctionPayoutCall;

  constructor(call: CollectAuctionPayoutCall) {
    this._call = call;
  }
}

export class CollectAuctionTokensCall extends ethereum.Call {
  get inputs(): CollectAuctionTokensCall__Inputs {
    return new CollectAuctionTokensCall__Inputs(this);
  }

  get outputs(): CollectAuctionTokensCall__Outputs {
    return new CollectAuctionTokensCall__Outputs(this);
  }
}

export class CollectAuctionTokensCall__Inputs {
  _call: CollectAuctionTokensCall;

  constructor(call: CollectAuctionTokensCall) {
    this._call = call;
  }

  get _auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectAuctionTokensCall__Outputs {
  _call: CollectAuctionTokensCall;

  constructor(call: CollectAuctionTokensCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _params(): CreateAuctionCall_paramsStruct {
    return changetype<CreateAuctionCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateAuctionCall_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get minimumBidAmount(): BigInt {
    return this[4].toBigInt();
  }

  get buyoutBidAmount(): BigInt {
    return this[5].toBigInt();
  }

  get timeBufferInSeconds(): BigInt {
    return this[6].toBigInt();
  }

  get bidBufferBps(): BigInt {
    return this[7].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[8].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[9].toBigInt();
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get _offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class CancelOfferCall extends ethereum.Call {
  get inputs(): CancelOfferCall__Inputs {
    return new CancelOfferCall__Inputs(this);
  }

  get outputs(): CancelOfferCall__Outputs {
    return new CancelOfferCall__Outputs(this);
  }
}

export class CancelOfferCall__Inputs {
  _call: CancelOfferCall;

  constructor(call: CancelOfferCall) {
    this._call = call;
  }

  get _offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOfferCall__Outputs {
  _call: CancelOfferCall;

  constructor(call: CancelOfferCall) {
    this._call = call;
  }
}

export class MakeOfferCall extends ethereum.Call {
  get inputs(): MakeOfferCall__Inputs {
    return new MakeOfferCall__Inputs(this);
  }

  get outputs(): MakeOfferCall__Outputs {
    return new MakeOfferCall__Outputs(this);
  }
}

export class MakeOfferCall__Inputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get _params(): MakeOfferCall_paramsStruct {
    return changetype<MakeOfferCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MakeOfferCall__Outputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get _offerId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MakeOfferCall_paramsStruct extends ethereum.Tuple {
  get assetContract(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get quantity(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get totalPrice(): BigInt {
    return this[4].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[5].toBigInt();
  }
}
